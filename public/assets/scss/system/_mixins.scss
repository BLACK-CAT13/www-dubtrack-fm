@mixin respond-to($value, $condition: min-width, $media: screen){

	@if $value == bp280{
		$value: 17.5em;
	}@else if $value == bp400{
		$value: 25em;
	}@else if $value == bp450{
		$value: 28.125em;
	}@else if $value == bp500{
		$value: 31.25em;
	}@else if $value == bp550{
		$value: 34.375em;
	}@else if $value == bp600{
		$value: 37.5em;
	}@else if $value == bp650{
		$value: 40.625em;
	}@else if $value == bp700{
		$value: 43.75em;
	}@else if $value == bp750{
		$value: 46.875em
	}@else if $value == bp800{
		$value: 50em;
	}@else if $value == bp850{
		$value: 53.125em;
	}@else if $value == bp900{
		$value: 56.25em;
	}@else if $value == bp970{
		$value: 60.625em;
	}@else if $value == bp1000{
		$value: 62.5em;
	}@else if $value == bp1050{
		$value: 65.625em;
	}@else if $value == bp1100{
		$value: 68.750em;
	}@else if $value == bp1150{
		$value: 71.875em;
	}@else if $value == bpheight240{
		$value: 15em;
	}@else if $value == bpheight300{
		$value: 18.75em;
	}

	@media only #{$media} and ($condition: $value){@content;}
}

@mixin clearfix(){
	overflow:hidden;
	zoom:1;
	*-ms-inject: expression(this.x||(this.innerHTML+='<br\ style="clear:both;font:0/0">',this.x=1));
}

@mixin font-smoothing($smoothing: antialiased){
	font-smooth: always;
	font-smoothing: $smoothing;
	-moz-font-smoothing: $smoothing;
	-webkit-font-smoothing: $smoothing;
	text-shadow: 0 1px 0 rgba(0,0,0,0.01);
	-webkit-text-stroke: 1px transparent;
}

@mixin ico-style(){
	font-family: 'IcoMoon';
	speak: none;
	font-style: normal;
	font-weight: normal;
	font-variant: normal;
	text-transform: none;
	line-height: 1;

	/* Better Font Rendering =========== */
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

@mixin clearfix2{
	*zoom: 1;

	&:before,
	&:after{
		content : " ";
		display: table;
	}

	&:after{
		clear: both;
	}
}

@mixin wrapper(){
	margin: 0 auto;
	max-width: $desktopMaxWidth;
	padding-left: 1em;
	padding-right: 1em;

	@include respond-to(bp1000) {
		padding-left: 0;
		padding-right: 0;
	}
}

@mixin defaults($width: 100%, $margin: 0 auto, $padding: 0, $position: relative){
	width: $width;
	margin: $margin;
	padding: $padding;
	position: $position;
}

@mixin transitions($prop: all, $time: 0.3 + s, $ease: ease-in-out, $delay: 0s){
	-webkit-transition: $prop $time $ease $delay;
	-moz-transition: $prop $time $ease $delay;
	-o-transition: $prop $time $ease $delay;
	transition: $prop $time $ease $delay;
}

@mixin ieopacity($a){
	opacity: $a / 100;
	-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$a})";
	filter: alpha(opacity = $a);
}

@mixin gradient($from, $to, $start, $end, $imp: false){
	background: -moz-linear-gradient(top, $from $start, $to $end); /* FF3.6+ */
	background: -webkit-gradient(linear, left top, left bottom, color-stop($start, $from), color-stop($end, $to)); /* Chrome,Safari4+ */
	background: -webkit-linear-gradient(top, $from $start, $to $end); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(top, $from $start, $to $end); /* Opera 11.10+ */
	background: -ms-linear-gradient(top, $from $start, $to $end); /* IE10+ */
	background: linear-gradient(top, $from $start, $to $end); /* W3C */
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$from}', endColorstr='#{$to}',GradientType=0 ); /* IE6-9 */
}

@mixin user-select($val: none){
	-webkit-touch-callout: $val;
	-webkit-user-select: $val;
	-khtml-user-select: $val;
	-moz-user-select: $val;
	-ms-user-select: $val;
	user-select: $val;
}

@mixin animate($name, $duration: 1s, $cycle: infinite){
	-webkit-animation: $name $duration $cycle;
	-moz-animation: $name $duration $cycle;
	-o-animation: $name $duration $cycle;
	animation: $name $duration $cycle;
}

@mixin animation($name){
	@-webkit-keyframes $name{@content;}
	@-moz-keyframes $name{@content;}
	@-o-keyframes $name{@content;}
	@keyframes $name{@content;}
}

@mixin retina-sprite-background($name,$normal: $icon-normal,$retina: $icon-retina){
	background-repeat: no-repeat;
	background-image: sprite-url($normal);
	background-position: sprite-position($normal,$name);
	height:image-height(sprite-file($normal, $name));
	width: image-width(sprite-file($normal, $name));

	// Media Query for retina
	@media (min--moz-device-pixel-ratio: 1.3),
	(-o-min-device-pixel-ratio: 2.6/2),
	(-webkit-min-device-pixel-ratio: 1.3),
	(min-device-pixel-ratio: 1.3),
	(min-resolution: 1.3dppx) {

		background-image: sprite-url($retina);
		background-position: 0 round(nth(sprite-position($retina, $name), 2) / 2);
		height:round(image-height(sprite-file($retina, $name)) / 2);
		width: round(image-width(sprite-file($retina, $name)) /2 );

		// treat the @2x retina sprite sheet as 50% wide for double resolution upon display
		$double-width:ceil(image-width(sprite-path($retina)) / 2);
		$auto-height:auto;
		@include background-size($double-width $auto-height);
	}
}